name: Docker CICD

on:
  push:
    branches:
      - master

jobs:
  cicd-linux-docker:
    name: CICD Linux for Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Generate secret key
        run: head -c16 /dev/urandom > src/secret.key

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: docker-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            docker-registry-
            docker-

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: docker-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            docker-index-
            docker-

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: docker-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            docker-build-
            docker-

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Copy neccessary files and zip
        run: |
          mkdir app
          cp target/release/actix-web-rest-api-with-jwt app/actix-web-rest-api-with-jwt
          cp diesel.toml app/diesel.toml
          cp Dockerfile.github-action app/Dockerfile
          cp wait-for-it.sh app/wait-for-it.sh
          cd app
          touch .env
          tar -czvf ../app.tar.gz .
          cd ..

      - name: Upload app archive for Docker job
        uses: actions/upload-artifact@v1
        with:
          name: artifact-linux-docker
          path: app.tar.gz

  cicd-docker:
    name: CICD Docker
    runs-on: ubuntu-latest
    needs: cicd-linux-docker
    steps:
      - name: Download app archive
        uses: actions/download-artifact@v2
        with:
          name: artifact-linux-docker

      - name: Extract app archive
        run: tar -zxvf app.tar.gz

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=sakadream/actix-web-rest-api-with-jwt
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build and publish
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
